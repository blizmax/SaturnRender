#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable


layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0) uniform  sampler2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;
layout (binding = 2) uniform UBO
{
	
	int direction;
	float scale;
	float strength;

} ubo;	
const int radius = 5;
const float weight[radius] =
{
	0.227027,
	0.1945946,
	0.1216216,
	0.054054,
	0.016216
};
vec3 gaussianBlur(float scale, float strength)
{
	
    
	vec2 dir = vec2(0.0,1.0);
	if(ubo.direction ==0)
	{
		dir = vec2(1.0,0.0);
	}
	
	vec3 res = texture(inputImage, vec2(gl_GlobalInvocationID.x , gl_GlobalInvocationID.y)).rgb * weight[0];
	for(int i=1;i<radius;i++)
	{
		res +=texture(inputImage, vec2(gl_GlobalInvocationID.xy)+ dir * i * scale).rgb * weight[i];
		res +=texture(inputImage, vec2(gl_GlobalInvocationID.xy)+ dir * -i * scale).rgb * weight[i];

	}
	
   return res *=strength;

}
void main()
{	
	vec3 res = gaussianBlur(2.5,1.0);
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(res,1.0));
}